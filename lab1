{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxlbN0dKXFCSYPdE9xMHZm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Olyaq/2.1_pyton_sybota/blob/main/Untitled11.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NjBtr5Gy3t1q"
      },
      "outputs": [],
      "source": [
        "from collections import defaultdict          # импортируем словарь\n",
        "\n",
        "class Student:\n",
        "    def __init__(self, name, group, grades):  # конструктор получает имя, группу и список оценок.\n",
        "        self.name = name                      # сохраняем имя\n",
        "        self.group = group\n",
        "        self.grades = grades\n",
        "\n",
        "    def average_grade(self):                  # метод средний балл\n",
        "        return sum(self.grades)/len(self.grades) if self.grades else 0  # сумма делится на длину списка, если список не пуст; иначе 0\n",
        "\n",
        "    def is_excellent(self):                   # м отличник\n",
        "        return self.average_grade() >= 4.5    # возвращаем True, если средний балл >= 4.5.\n",
        "\n",
        "students = []                                 # пустой список для Student.\n",
        "\n",
        "with open(\"students.txt\", encoding=\"utf-8\") as f:  # открываем входной файл в UTF-8.\n",
        "    for line in f:                            # идём по строкам файла.\n",
        "        line = line.strip()                   # убираем перевод строки и пробелы по краям.\n",
        "        if not line:                          # если строка пустая то пропускаем её\n",
        "            continue\n",
        "        name, group, gs = line.split(\";\")     # разбиваем по ;  имя, группа, строка оценок \"5,4,5\".\n",
        "        grades = [int(x) for x in gs.split(\",\") if x]  # превращаем \"5,4,5\" в [5,4,5].\n",
        "        students.append(Student(name, group, grades))  # создаём Student и добавляем в список.\n",
        "\n",
        "with open(\"excellent_students.txt\", \"w\", encoding=\"utf-8\") as out:  # открываем файл вывода\n",
        "    for s in students:                       # идём по студентам.\n",
        "        if s.is_excellent():                 # если отличник записываем строку \"Имя - Группа\"\n",
        "            out.write(f\"{s.name} - {s.group}\\n\")\n",
        "\n",
        "groups = defaultdict(list)                   # словарь ключ=группа, значение=список всех оценок группы.\n",
        "for s in students:                           # идём по студентам.\n",
        "    groups[s.group] += s.grades              # доб оценки студента к списку его группы.\n",
        "\n",
        "for g, vals in groups.items():               # идём по группам и их оценкам.\n",
        "    print(f\"{g}: {round(sum(vals)/len(vals), 2) if vals else 0}\")  # считаем средний балл группы. если оценок нет — печатаем 0."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re                                      # импортируем модуль регулярных выражений\n",
        "\n",
        "# многострочный пример лога (тройные кавычки = многострочный литерал)\n",
        "text = \"\"\"\n",
        "2025-10-03 12:33:45 IP=192.168.0.10 USER=ADMIN root@example.com\n",
        "HELLO WARN ERROR OK 10.0.0.5 2025-10-03 12:35:00 info@company.org\n",
        "\"\"\"\n",
        "\n",
        "ips   = re.findall(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', text)  # находим все IPv4-адреса\n",
        "times = re.findall(r'\\b\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\b', text)  # находим все таймстемпы\n",
        "upper = re.findall(r'\\b[A-Z]{2,}\\b', text)                # находим слова в ВЕРХНЕМ РЕГИСТРЕ\n",
        "clean = re.sub(r'\\b[\\w.%+-]+@[\\w.-]+\\.[A-Za-z]{2,}\\b',    # заменяем все email-адреса на маркер\n",
        "               '[EMAIL PROTECTED]', text)\n",
        "print(ips)                                                # печатаем найденные IPv4\n",
        "print(times)                                              # найденные временные метки\n",
        "print(upper)                                              # UPPERCASE-слова\n",
        "print(clean)                                              # текст с замёненными email"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rZV0I4Ok5EVE",
        "outputId": "7bf2fd06-b33a-48d8-dd02-cae0f8040cf4"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['192.168.0.10', '10.0.0.5']\n",
            "['2025-10-03 12:33:45', '2025-10-03 12:35:00']\n",
            "['IP', 'USER', 'ADMIN', 'HELLO', 'WARN', 'ERROR', 'OK']\n",
            "                                                            \n",
            "2025-10-03 12:33:45 IP=192.168.0.10 USER=ADMIN [EMAIL PROTECTED]\n",
            "HELLO WARN ERROR OK 10.0.0.5 2025-10-03 12:35:00 [EMAIL PROTECTED]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd                             # импортируем библиотеку\n",
        "import numpy as np                              # импортируем numpy\n",
        "import matplotlib.pyplot as plt                 # графики из matplotlib, модуль pyplot\n",
        "\n",
        "df = pd.DataFrame({                             # создаём df\n",
        "    \"Товар\": [\"A\",\"B\",\"A\",\"C\",\"B\",\"C\",\"A\"],\n",
        "    \"Цена\":  [100, np.nan, 120, 80, np.nan, 95, 1000],\n",
        "    \"Количество\": [10, 2, 1500, 0, 5, 7, 3]\n",
        "})\n",
        "\n",
        "df[\"Цена\"] = df[\"Цена\"].fillna(df[\"Цена\"].median())  # заполняем NaN в цене медианой\n",
        "df = df[(df[\"Количество\"] >= 1) & (df[\"Количество\"] <= 1000)]  # фильтруем строки 1 ≤ количество ≤ 1000\n",
        "df[\"Общая_стоимость\"] = df[\"Цена\"] * df[\"Количество\"]           # новый столбец = цена на количество\n",
        "\n",
        "rev = df.groupby(\"Товар\")[\"Общая_стоимость\"].sum()   # группируем по товару и суммируем выручку\n",
        "print(df)                                            # печатаем обработанный df\n",
        "print(rev)                                           # выручку по товарам (Series)\n",
        "\n",
        "plt.figure()                                         # создаём фигуру для графика\n",
        "plt.bar(rev.index, rev.values)                       # столбчатая диаграмма товары по оси X, суммы по Y\n",
        "plt.title(\"Выручка по товарам\")\n",
        "plt.xlabel(\"Товар\"); plt.ylabel(\"Выручка\")\n",
        "plt.tight_layout(); plt.show()                       # компоновка + показ графика"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "id": "waHLLcAa6ExN",
        "outputId": "43c7edf1-8a04-4324-c81c-cb9b2d1770ea"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Товар    Цена  Количество  Общая_стоимость\n",
            "0     A   100.0          10           1000.0\n",
            "1     B   100.0           2            200.0\n",
            "4     B   100.0           5            500.0\n",
            "5     C    95.0           7            665.0\n",
            "6     A  1000.0           3           3000.0\n",
            "Товар\n",
            "A    4000.0\n",
            "B     700.0\n",
            "C     665.0\n",
            "Name: Общая_стоимость, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np                                  # импорт numpy\n",
        "\n",
        "np.random.seed(42)                                  # фиксируем сид генератора для воспроизводимости\n",
        "\n",
        "A = np.random.randint(1, 11, (5, 5))                # матрица A: 5×5, целые [1..10]\n",
        "B = np.random.randint(1, 11, (5, 5))                # матрица B: 5×5, целые [1..10]\n",
        "\n",
        "print(\"A:\\n\", A)                                    # печать A\n",
        "print(\"B:\\n\", B)                                    # печать в\n",
        "print(\"A*B:\\n\", A * B)                              # поэлементное произведение\n",
        "print(\"A@B:\\n\", A @ B)                              # матричное произведение\n",
        "print(\"det(A):\", np.linalg.det(A))                  # определитель матрицы A\n",
        "print(\"B^T:\\n\", B.T)                                # транспонирование B\n",
        "\n",
        "try:\n",
        "    print(\"A^-1:\\n\", np.linalg.inv(A))              # пытаемся вычислить обратную A^{-1}.\n",
        "except np.linalg.LinAlgError:\n",
        "    print(\"Обратная матрица не существует.\")        # сообщаем если A вырожденная\n",
        "\n",
        "C = A.sum(axis=1)                                   # вектор C суммы по строкам A\n",
        "try:\n",
        "    x = np.linalg.solve(A, C)                       # решаем систему A·x = C\n",
        "    print(\"Решение x:\\n\", x)                        # печатаем решение\n",
        "except np.linalg.LinAlgError:\n",
        "    print(\"Систему решить нельзя.\")                 # сообщаем об ошибке"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NqrO82dJ7Fc5",
        "outputId": "608909f8-9b53-4f97-b525-5b62b835a730"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A:\n",
            " [[ 7  4  8  5  7]\n",
            " [10  3  7  8  5]\n",
            " [ 4  8  8  3  6]\n",
            " [ 5  2  8  6  2]\n",
            " [ 5  1 10  6  9]]\n",
            "B:\n",
            " [[ 1 10  3  7  4]\n",
            " [ 9  3  5  3  7]\n",
            " [ 5  9  7  2  4]\n",
            " [ 9  2 10  9 10]\n",
            " [ 5  2  4  7  8]]\n",
            "A*B:\n",
            " [[ 7 40 24 35 28]\n",
            " [90  9 35 24 35]\n",
            " [20 72 56  6 24]\n",
            " [45  4 80 54 20]\n",
            " [25  2 40 42 72]]\n",
            "A@B:\n",
            " [[163 178 175 171 194]\n",
            " [169 198 194 200 209]\n",
            " [173 154 162 137 182]\n",
            " [127 144 149 125 142]\n",
            " [163 173 186 175 199]]\n",
            "det(A): 2025.000000000003\n",
            "B^T:\n",
            " [[ 1  9  5  9  5]\n",
            " [10  3  9  2  2]\n",
            " [ 3  5  7 10  4]\n",
            " [ 7  3  2  9  7]\n",
            " [ 4  7  4 10  8]]\n",
            "A^-1:\n",
            " [[ 0.72888889 -0.19555556 -0.27555556  0.08444444 -0.29333333]\n",
            " [-0.31259259  0.15703704  0.24148148 -0.08296296  0.01333333]\n",
            " [ 0.51259259 -0.35703704 -0.17481481  0.28296296 -0.14666667]\n",
            " [-1.12296296  0.54518519  0.35407407 -0.17481481  0.37333333]\n",
            " [-0.19111111  0.12444444  0.08444444 -0.23555556  0.18666667]]\n",
            "Решение x:\n",
            " [1. 1. 1. 1. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math                                         # импортируем math\n",
        "\n",
        "def safe_apply(func, data):                         # объявляем функцию принимающую функцию и список\n",
        "    results, errors = [], []                        # делаем два списка успешные результаты и ошибки\n",
        "    for el in data:                                 # идём по элементам входного списка\n",
        "        try:\n",
        "            results.append(func(el))                # пробуем применить func к элементу и сохранить результат\n",
        "        except Exception as e:                      # любое исключение\n",
        "            errors.append((el, type(e).__name__))   # в errors кладём пару исходный элемент и тип ошибки\n",
        "    return results, errors                          # возвращаем results, errors\n",
        "\n",
        "data = ['4', '16', 'text', '-25', '9.0']            # набор строк корректные и некорректные\n",
        "f = lambda x: math.sqrt(float(x))                   # лямбда преобразует строку в float, берёт квадратный корень\n",
        "\n",
        "res, err = safe_apply(f, data)                      # вызываем safe_apply\n",
        "print(\"Результаты:\", res)                           # успешные результаты.\n",
        "print(\"Ошибки:\", err)                               # список ошибок (элемент, тип исключения)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ytGmYGRO8J2o",
        "outputId": "c1575a02-575e-41e8-e8fe-58300e693644"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Результаты: [2.0, 4.0, 3.0]\n",
            "Ошибки: [('text', 'ValueError'), ('-25', 'ValueError')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Wknq4mS_9B4C"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
